import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from sklearn.model_selection import cross_val_score, train_test_split
from sklearn.metrics import confusion_matrix, classification_report

st.set_page_config(page_title="R√©gression Logistique", layout="wide")
st.title("üîç Analyse avec R√©gression Logistique")
st.write("Ce module applique une r√©gression logistique pour pr√©dire l'approbation d'un pr√™t.")

# Chargement des donn√©es
df = pd.read_csv("data/Loan.csv")

# S√©lection des variables
df_clean = df[['RiskScore', 'DebtToIncomeRatio', 'NetWorth', 'AnnualIncome', 'LoanApproved']].dropna()

X = df_clean[['RiskScore', 'DebtToIncomeRatio', 'NetWorth', 'AnnualIncome']]
y = df_clean['LoanApproved']

# Split identique
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Cr√©ation du pipeline
logreg_pipeline = Pipeline([
    ('scaler', StandardScaler()),
    ('logreg', LogisticRegression(max_iter=1000, C=0.01, penalty='l2', class_weight='balanced'))
])

# Validation crois√©e
logreg_scores = cross_val_score(logreg_pipeline, X, y, cv=5, scoring='accuracy')
st.metric("üéØ Accuracy (CV 5 folds)", f"{logreg_scores.mean():.2%}")
with st.expander(" Interpr√©tation de la validation crois√©e "):
    st.write("""
    Le mod√®le de r√©gression logistique a √©t√© √©valu√© √† l'aide d'une validation crois√©e √† 5 plis (**5-fold cross-validation**).

     **R√©sultat obtenu :** une accuracy moyenne de **97.85‚ÄØ%** sur les 5 plis.

     **Interpr√©tation :**
    - Cela signifie que le mod√®le parvient √† pr√©dire correctement l'approbation ou le refus de pr√™t dans environ **98 cas sur 100** sur des sous-ensembles diff√©rents des donn√©es.
    - Une telle performance indique que le mod√®le est **robuste**, **g√©n√©ralise bien** et ne d√©pend pas excessivement d'un seul √©chantillon de donn√©es.
    - La validation crois√©e permet √©galement de r√©duire les risques de surapprentissage (*overfitting*) en s'assurant que le mod√®le est test√© sur diff√©rentes portions du jeu de donn√©es.
    
    
    """)


# Entra√Ænement et pr√©dictions
logreg_pipeline.fit(X_train, y_train)
y_pred_logreg = logreg_pipeline.predict(X_test)

# ========================
# üìâ Matrice de confusion
# ========================
st.subheader("üìâ Matrice de confusion")
cm_logreg = confusion_matrix(y_test, y_pred_logreg)
fig, ax = plt.subplots()
sns.heatmap(cm_logreg, annot=True, fmt='d', cmap='Oranges',
            xticklabels=['Refus√©', 'Approuv√©'], yticklabels=['Refus√©', 'Approuv√©'], ax=ax)
plt.xlabel("Pr√©diction")
plt.ylabel("R√©el")
st.pyplot(fig)



st.write("""



- **Vrai positif (VP = 999)** : le mod√®le a correctement pr√©dit l‚Äôapprobation du pr√™t pour 999 clients.
- **Faux n√©gatif (FN = 18)** : 18 clients dont le pr√™t devait √™tre approuv√© ont √©t√© √† tort class√©s comme refus√©s.
- **Vrai n√©gatif (VN = 2925)** : 2925 refus ont √©t√© correctement identifi√©s par le mod√®le.
- **Faux positif (FP = 58)** : 58 clients ont √©t√© approuv√©s √† tort, alors qu‚Äôils auraient d√ª √™tre refus√©s.




""")


# ========================
# üìÑ Rapport de classification
# ========================
st.subheader("üìÑ Rapport de classification")
# G√©n√©rer le rapport sous forme de dictionnaire
report_dict = classification_report(y_test, y_pred_logreg, target_names=["Refus√©", "Approuv√©"], output_dict=True)
report_df = pd.DataFrame(report_dict).transpose()
# Afficher le rapport joliment dans Streamlit
table_style = report_df.style.format("{:.2f}").set_properties(**{"text-align": "center"})
st.dataframe(table_style, use_container_width=True)



st.write("""


####  **Interpr√©tation du rapport de classification**

- **Accuracy globale** : **98%**  
  ‚Üí Le mod√®le est **tr√®s performant** avec seulement **2% d'erreurs globales**.

#####  Classe "Refus√©"
- **Pr√©cision = 0.99** ‚Üí Parmi tous les clients pr√©vus comme refus√©s, 99% l‚Äô√©taient r√©ellement.
- **Recall = 0.98** ‚Üí Le mod√®le identifie correctement 98% des refus r√©els.
- **F1-score = 0.99** ‚Üí Tr√®s bon √©quilibre entre pr√©cision et rappel.

#####  Classe "Approuv√©"
- **Pr√©cision = 0.95** ‚Üí Parmi les clients pr√©dits comme approuv√©s, 95% ont r√©ellement eu leur pr√™t accord√©.
- **Recall = 0.98** ‚Üí Le mod√®le capture 98% des clients √† approuver.
- **F1-score = 0.96** ‚Üí Tr√®s bon compromis entre pr√©cision et rappel, malgr√© un l√©ger d√©s√©quilibre.



#####  **Ce que cela signifie :**
- Le mod√®le est **tr√®s fiable** pour **pr√©dire les refus**, avec tr√®s peu de faux positifs.
- Il est aussi **bon pour approuver** les bons dossiers, m√™me s‚Äôil a un **petit taux d‚Äôerreurs d‚Äôapprobation (FP)** qui pourrait √™tre co√ªteux si les clients √† risque obtiennent un pr√™t par erreur.
- Les **faux n√©gatifs** sont tr√®s faibles (seulement 18 sur 1017), ce qui est **positif**, car peu de bons clients sont injustement refus√©s.



####  **Conclusion**
Ce mod√®le de r√©gression logistique est bien calibr√©, **pr√©cis et √©quilibr√©**, adapt√© √† un usage en pr√©-qualification ou en support aux d√©cisions d‚Äôoctroi de pr√™ts.  
Il conviendra toutefois de renforcer la v√©rification humaine sur les cas limites, surtout autour des **clients approuv√©s √† faible probabilit√©**, pour **minimiser les risques de d√©faut**.
""")



# ========================
# üß™ Tester un nouveau client
# ========================
st.subheader(" Simulation : Tester un nouveau client")

with st.form("formulaire_client"):
    col1, col2 = st.columns(2)

    with col1:
        risk_score = st.number_input("Risk Score", min_value=0, max_value=100, value=50)
        debt_ratio = st.number_input("Debt to Income Ratio", min_value=0.0, max_value=5.0, value=0.5, step=0.01)

    with col2:
        net_worth = st.number_input("Net Worth", min_value=0.0, value=10000.0, step=100.0)
        annual_income = st.number_input("Annual Income", min_value=0.0, value=30000.0, step=100.0)

    submitted = st.form_submit_button("Pr√©dire")

    if submitted:
        # Cr√©ation d'un DataFrame pour le client simul√©
        client_data = pd.DataFrame([{
            'RiskScore': risk_score,
            'DebtToIncomeRatio': debt_ratio,
            'NetWorth': net_worth,
            'AnnualIncome': annual_income
        }])

        # Pr√©diction
        prediction = logreg_pipeline.predict(client_data)[0]
        proba = logreg_pipeline.predict_proba(client_data)[0][prediction]

        # Affichage du r√©sultat
        if prediction == 1:
            st.success(f"‚úÖ Cr√©dit **APPROUV√â** avec une probabilit√© de {proba:.2%}")
            st.markdown("###  Justification possible :")
            if risk_score >= 60 and annual_income >= 40000 and debt_ratio <= 0.5:
                st.write("- Le client a un **bon score de risque** et un **revenu stable**.")
                st.write("- Son **niveau d'endettement est raisonnable**, ce qui le rend solvable.")
            elif net_worth > 20000:
                st.write("- Bien que le revenu soit moyen, le client a un **patrimoine √©lev√©** (Net Worth) pouvant rassurer sur sa capacit√© de remboursement.")
            else:
                st.write("- Les caract√©ristiques financi√®res du client sont **suffisamment solides** selon le mod√®le.")
        
        else:
            st.error(f"‚ùå Cr√©dit **REFUS√â** avec une probabilit√© de {proba:.2%}")
            st.markdown("###  Justification possible :")
            if risk_score <= 30:
                st.write("- Le **RiskScore est trop faible**, ce qui indique un profil risqu√©.")
            if debt_ratio > 0.6:
                st.write("- Le client a un **niveau d'endettement √©lev√©**.")
            if annual_income < 20000:
                st.write("- Le **revenu annuel est trop faible** pour garantir un remboursement s√ªr.")
            if net_worth < 5000:
                st.write("- Le **patrimoine du client est insuffisant**, ce qui augmente le risque.")
            if risk_score > 30 and annual_income >= 20000 and net_worth >= 5000:
                st.write("- Bien que les crit√®res soient acceptables, **le mod√®le a identifi√© un l√©ger risque** justifiant un refus.")
